{
  "address": "0x457F02d4Fe78DB5e48634006D27DE237d3638c66",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "timelock",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "beneficiary",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "admin",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "cliffDuration",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "startTime",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "duration",
          "type": "uint256"
        }
      ],
      "name": "TimelockDeployed",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_deployer",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_beneficiary",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_startTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "computeTimelockAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "_computed",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_beneficiary",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_admin",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_cliffDuration",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_startTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_duration",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_funding",
          "type": "uint256"
        }
      ],
      "name": "deployTimelock",
      "outputs": [
        {
          "internalType": "address",
          "name": "_deployed",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xf2050b31195c89a6abcc90bf81f2d61f33ed8c8bb313a1329a92ec5bbf6cbe99",
  "receipt": {
    "to": "0x4e59b44847b379578588920cA78FbF26c0B4956C",
    "from": "0xD2c6af522591ddCd5327fe3f628a44A2cfa3EC5D",
    "contractAddress": null,
    "transactionIndex": 10,
    "gasUsed": "3667428",
    "logsBloom": "0x
    "blockHash": "0x27fa223ea3ba668390b003bce79d2af30a38488dff7e4119a4b74990491da541",
    "transactionHash": "0xf2050b31195c89a6abcc90bf81f2d61f33ed8c8bb313a1329a92ec5bbf6cbe99",
    "logs": [],
    "blockNumber": 9632396,
    "cumulativeGasUsed": "9865278",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "5eeacf0b5878f76ce391194c8b9bae56",
  "metadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"timelock\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"cliffDuration\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"}],\"name\":\"TimelockDeployed\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_deployer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_beneficiary\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"computeTimelockAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"_computed\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_beneficiary\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_admin\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_cliffDuration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_duration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_funding\",\"type\":\"uint256\"}],\"name\":\"deployTimelock\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"_deployed\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"computeTimelockAddress(address,address,address,uint256,uint256)\":{\"params\":{\"_amount\":\"The amount to unlock\",\"_beneficiary\":\"The address that will claim unlocks\",\"_deployer\":\"The address that will deploy the contract\",\"_startTime\":\"The start time\",\"_token\":\"The token to unlock\"}},\"deployTimelock(address,address,address,uint256,uint256,uint256,uint256,uint256)\":{\"details\":\"Salt generated from token, beneficiary, amount, and deployer.Funding is optional. If funding is provided, the timelock will be funded with the funding amount. \",\"params\":{\"_admin\":\"Clawback admin\",\"_amount\":\"The amount to unlock\",\"_beneficiary\":\"Unlocking address\",\"_cliffDuration\":\"Duration of cliff in seconds\",\"_duration\":\"Duration of the unlock schedule in seconds\",\"_funding\":\"The initial funding amount\",\"_startTime\":\"Unlock start time in seconds\",\"_token\":\"Token to unlock\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"computeTimelockAddress(address,address,address,uint256,uint256)\":{\"notice\":\"Computes the address of a timelock contract. \"},\"deployTimelock(address,address,address,uint256,uint256,uint256,uint256,uint256)\":{\"notice\":\"Deploys a LineatTokenTimelock with create3. \"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/timelocks/TimelockFactory.sol\":\"TimelockFactory\"},\"evmVersion\":\"paris\",\"libraries\":{\":__CACHE_BREAKER__\":\"0x0000000000000031363933373834363433363330\"},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"lib/openzeppelin-contracts/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x923b9774b81c1abfb992262ae7763b6e6de77b077a7180d53c6ebb7b1c8bd648\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x00c839ff53d07d19db2e7cfa1e5133f9ee90a8d64b0e2e57f50446a2d1a3a0e0\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"lib/solmate/src/utils/Bytes32AddressLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0;\\n\\n/// @notice Library for converting between addresses and bytes32 values.\\n/// @author Solmate (https://github.com/Rari-Capital/solmate/blob/main/src/utils/Bytes32AddressLib.sol)\\nlibrary Bytes32AddressLib {\\n    function fromLast20Bytes(bytes32 bytesValue) internal pure returns (address) {\\n        return address(uint160(uint256(bytesValue)));\\n    }\\n\\n    function fillLast12Bytes(address addressValue) internal pure returns (bytes32) {\\n        return bytes32(bytes20(addressValue));\\n    }\\n}\\n\",\"keccak256\":\"0xf40b65d6d9f75ac1446fa1e72b485cb9a9f9766df5dfa5a9355154f27620cd4f\",\"license\":\"MIT\"},\"lib/solmate/src/utils/CREATE3.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0;\\n\\nimport {Bytes32AddressLib} from \\\"./Bytes32AddressLib.sol\\\";\\n\\n/// @notice Deploy to deterministic addresses without an initcode factor.\\n/// @author Solmate (https://github.com/Rari-Capital/solmate/blob/main/src/utils/CREATE3.sol)\\n/// @author Modified from 0xSequence (https://github.com/0xSequence/create3/blob/master/contracts/Create3.sol)\\nlibrary CREATE3 {\\n    using Bytes32AddressLib for bytes32;\\n\\n    //--------------------------------------------------------------------------------//\\n    // Opcode     | Opcode + Arguments    | Description      | Stack View             //\\n    //--------------------------------------------------------------------------------//\\n    // 0x36       |  0x36                 | CALLDATASIZE     | size                   //\\n    // 0x3d       |  0x3d                 | RETURNDATASIZE   | 0 size                 //\\n    // 0x3d       |  0x3d                 | RETURNDATASIZE   | 0 0 size               //\\n    // 0x37       |  0x37                 | CALLDATACOPY     |                        //\\n    // 0x36       |  0x36                 | CALLDATASIZE     | size                   //\\n    // 0x3d       |  0x3d                 | RETURNDATASIZE   | 0 size                 //\\n    // 0x34       |  0x34                 | CALLVALUE        | value 0 size           //\\n    // 0xf0       |  0xf0                 | CREATE           | newContract            //\\n    //--------------------------------------------------------------------------------//\\n    // Opcode     | Opcode + Arguments    | Description      | Stack View             //\\n    //--------------------------------------------------------------------------------//\\n    // 0x67       |  0x67XXXXXXXXXXXXXXXX | PUSH8 bytecode   | bytecode               //\\n    // 0x3d       |  0x3d                 | RETURNDATASIZE   | 0 bytecode             //\\n    // 0x52       |  0x52                 | MSTORE           |                        //\\n    // 0x60       |  0x6008               | PUSH1 08         | 8                      //\\n    // 0x60       |  0x6018               | PUSH1 18         | 24 8                   //\\n    // 0xf3       |  0xf3                 | RETURN           |                        //\\n    //--------------------------------------------------------------------------------//\\n    bytes internal constant PROXY_BYTECODE = hex\\\"67_36_3d_3d_37_36_3d_34_f0_3d_52_60_08_60_18_f3\\\";\\n\\n    bytes32 internal constant PROXY_BYTECODE_HASH = keccak256(PROXY_BYTECODE);\\n\\n    function deploy(\\n        bytes32 salt,\\n        bytes memory creationCode,\\n        uint256 value\\n    ) internal returns (address deployed) {\\n        bytes memory proxyChildBytecode = PROXY_BYTECODE;\\n\\n        address proxy;\\n        assembly {\\n            // Deploy a new contract with our pre-made bytecode via CREATE2.\\n            // We start 32 bytes into the code to avoid copying the byte length.\\n            proxy := create2(0, add(proxyChildBytecode, 32), mload(proxyChildBytecode), salt)\\n        }\\n        require(proxy != address(0), \\\"DEPLOYMENT_FAILED\\\");\\n\\n        deployed = getDeployed(salt);\\n        (bool success, ) = proxy.call{value: value}(creationCode);\\n        require(success && deployed.code.length != 0, \\\"INITIALIZATION_FAILED\\\");\\n    }\\n\\n    function getDeployed(bytes32 salt) internal view returns (address) {\\n        address proxy = keccak256(\\n            abi.encodePacked(\\n                // Prefix:\\n                bytes1(0xFF),\\n                // Creator:\\n                address(this),\\n                // Salt:\\n                salt,\\n                // Bytecode hash:\\n                PROXY_BYTECODE_HASH\\n            )\\n        ).fromLast20Bytes();\\n\\n        return\\n            keccak256(\\n                abi.encodePacked(\\n                    // 0xd6 = 0xc0 (short RLP prefix) + 0x16 (length of: 0x94 ++ proxy ++ 0x01)\\n                    // 0x94 = 0x80 + 0x14 (0x14 = the length of an address, 20 bytes, in hex)\\n                    hex\\\"d6_94\\\",\\n                    proxy,\\n                    hex\\\"01\\\" // Nonce of the proxy contract (1)\\n                )\\n            ).fromLast20Bytes();\\n    }\\n}\\n\",\"keccak256\":\"0x8dde9dd813e67e88e026308c7db180c368769a8d4dd60056bbb84f10d6817e30\",\"license\":\"MIT\"},\"src/timelocks/LinearTokenTimelock.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.8.19;\\n\\nimport \\\"./TokenTimelock.sol\\\";\\n\\n/// Modified from: https://github.com/fei-protocol/fei-protocol-core/blob/develop/contracts/timelocks/LinearTokenTimelock.sol\\n/// @author Fei Protocol\\ncontract LinearTokenTimelock is TokenTimelock {\\n  constructor(\\n    address _beneficiary,\\n    uint256 _duration,\\n    address _lockedToken,\\n    uint256 _cliffDuration,\\n    address _clawbackAdmin,\\n    uint256 _startTime\\n  ) TokenTimelock(_beneficiary, _duration, _cliffDuration, _lockedToken, _clawbackAdmin) {\\n    if (_startTime != 0) {\\n      startTime = _startTime;\\n    }\\n  }\\n\\n  function _proportionAvailable(\\n    uint256 initialBalance,\\n    uint256 elapsed,\\n    uint256 duration\\n  ) internal pure override returns (uint256) {\\n    return (initialBalance * elapsed) / duration;\\n  }\\n}\\n\",\"keccak256\":\"0xe8974f410b21e58a20f607dd8aeb7031c4ac19306c95a5b5646a1b320da0181f\",\"license\":\"GPL-3.0-or-later\"},\"src/timelocks/Timed.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.8.19;\\n\\n/// @title an abstract contract for timed events\\n/// @author Fei Protocol\\n/// @dev Modified from: https://github.com/fei-protocol/fei-protocol-core/blob/develop/contracts/utils/Timed.sol\\nabstract contract Timed {\\n  /// @notice the start timestamp of the timed period\\n  uint256 public startTime;\\n\\n  /// @notice the duration of the timed period\\n  uint256 public duration;\\n\\n  event DurationUpdate(uint256 oldDuration, uint256 newDuration);\\n\\n  event TimerReset(uint256 startTime);\\n\\n  constructor(uint256 _duration) {\\n    _setDuration(_duration);\\n  }\\n\\n  modifier duringTime() {\\n    require(isTimeStarted(), \\\"Timed: time not started\\\");\\n    require(!isTimeEnded(), \\\"Timed: time ended\\\");\\n    _;\\n  }\\n\\n  modifier afterTime() {\\n    require(isTimeEnded(), \\\"Timed: time not ended\\\");\\n    _;\\n  }\\n\\n  /// @notice return true if time period has ended\\n  function isTimeEnded() public view returns (bool) {\\n    return remainingTime() == 0;\\n  }\\n\\n  /// @notice number of seconds remaining until time is up\\n  /// @return remaining\\n  function remainingTime() public view returns (uint256) {\\n    return duration - timeSinceStart(); // duration always >= timeSinceStart which is on [0,d]\\n  }\\n\\n  /// @notice number of seconds since contract was initialized\\n  /// @return timestamp\\n  /// @dev will be less than or equal to duration\\n  function timeSinceStart() public view returns (uint256) {\\n    if (!isTimeStarted()) {\\n      return 0; // uninitialized\\n    }\\n    uint256 _duration = duration;\\n    uint256 timePassed = block.timestamp - startTime; // block timestamp always >= startTime\\n    return timePassed > _duration ? _duration : timePassed;\\n  }\\n\\n  function isTimeStarted() public view returns (bool) {\\n    return startTime != 0;\\n  }\\n\\n  function _initTimed() internal {\\n    startTime = block.timestamp;\\n\\n    emit TimerReset(block.timestamp);\\n  }\\n\\n  function _setDuration(uint256 newDuration) internal {\\n    require(newDuration != 0, \\\"Timed: zero duration\\\");\\n\\n    uint256 oldDuration = duration;\\n    duration = newDuration;\\n    emit DurationUpdate(oldDuration, newDuration);\\n  }\\n}\\n\",\"keccak256\":\"0xfb855a532c93f6c77ac4ac4c72a7513ed6093558063839a7584c6e9943256c3e\",\"license\":\"GPL-3.0-or-later\"},\"src/timelocks/TimelockFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.19;\\n\\nimport {IERC20} from \\\"lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol\\\";\\nimport {CREATE3} from \\\"lib/solmate/src/utils/CREATE3.sol\\\";\\n\\nimport {TimelockedDelegator} from \\\"./TimelockedDelegator.sol\\\";\\n\\ncontract TimelockFactory {\\n  // ============ events ============\\n  event TimelockDeployed(\\n    address indexed timelock,\\n    address indexed token,\\n    address indexed beneficiary,\\n    address admin,\\n    uint256 cliffDuration,\\n    uint256 startTime,\\n    uint256 duration\\n  );\\n\\n  // ============ public functions ============\\n\\n  /**\\n   * @notice Deploys a LineatTokenTimelock with create3.\\n   * \\n   * @dev Salt generated from token, beneficiary, amount, and deployer.\\n   * @dev Funding is optional. If funding is provided, the timelock will be funded with the funding amount.\\n   * \\n   * @param _token Token to unlock\\n   * @param _beneficiary Unlocking address\\n   * @param _admin Clawback admin\\n   * @param _cliffDuration Duration of cliff in seconds\\n   * @param _startTime Unlock start time in seconds\\n   * @param _duration Duration of the unlock schedule in seconds\\n   * @param _amount The amount to unlock\\n   * @param _funding The initial funding amount\\n   */\\n  function deployTimelock(\\n    address _token,\\n    address _beneficiary,\\n    address _admin,\\n    uint256 _cliffDuration,\\n    uint256 _startTime,\\n    uint256 _duration,\\n    uint256 _amount,\\n    uint256 _funding\\n  ) public returns (address _deployed) {\\n    _deployed = _deployTimelock(_token, _beneficiary, _admin, _cliffDuration, _startTime, _duration, _amount);\\n\\n    if (_funding > 0) {\\n      // fund timelock\\n      IERC20(_token).transferFrom(msg.sender, _deployed, _funding);\\n    }\\n  }\\n\\n  /**\\n   * @notice Computes the address of a timelock contract.\\n   * \\n   * @param _deployer The address that will deploy the contract\\n   * @param _token The token to unlock\\n   * @param _beneficiary The address that will claim unlocks\\n   * @param _startTime The start time\\n   * @param _amount The amount to unlock\\n   */\\n  function computeTimelockAddress(\\n    address _deployer,\\n    address _token,\\n    address _beneficiary,\\n    uint256 _startTime,\\n    uint256 _amount\\n  ) public view returns (address _computed) {\\n    // Get salt\\n    bytes32 salt = _getSalt(_token, _beneficiary, _deployer, _startTime, _amount);\\n\\n    // Deploy timelock\\n    _computed = CREATE3.getDeployed(salt);\\n  }\\n\\n  // ============ internal functions ============\\n  function _deployTimelock(\\n    address _token,\\n    address _beneficiary,\\n    address _admin,\\n    uint256 _cliffDuration,\\n    uint256 _startTime,\\n    uint256 _duration,\\n    uint256 _amount\\n  ) internal returns (address _deployed) {\\n    // Get salt\\n    bytes32 salt = _getSalt(_token, _beneficiary, msg.sender, _startTime, _amount);\\n\\n    // Get bytecode\\n    bytes memory creation = type(TimelockedDelegator).creationCode;\\n    bytes memory bytecode = abi.encodePacked(\\n      creation,\\n      abi.encode(_token, _beneficiary, _admin, _cliffDuration, _startTime, _duration)\\n    );\\n\\n    // Deploy timelock\\n    _deployed = CREATE3.deploy(salt, bytecode, 0);\\n    emit TimelockDeployed(_deployed, _token, _beneficiary, _admin, _cliffDuration, _startTime, _duration);\\n  }\\n\\n  function _getSalt(\\n    address _token,\\n    address _beneficiary,\\n    address _deployer,\\n    uint256 _startTime,\\n    uint256 _amount\\n  ) internal pure returns (bytes32 _salt) {\\n    _salt = keccak256(abi.encodePacked(_token, _beneficiary, _deployer, _startTime, _amount));\\n  }\\n\\n}\\n\",\"keccak256\":\"0xb9ce13ae4f804d73a337fda40d32c9e921233d8dd9bee1d7374a35b7ced62ee6\",\"license\":\"MIT\"},\"src/timelocks/TimelockedDelegator.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.8.19;\\n\\nimport {Ownable} from \\\"lib/openzeppelin-contracts/contracts/access/Ownable.sol\\\";\\nimport {ITimelockedDelegator, IDelegatable} from \\\"./interface/ITimelockedDelegator.sol\\\";\\nimport {LinearTokenTimelock} from \\\"./LinearTokenTimelock.sol\\\";\\n\\n/// @title a proxy delegate contract for token\\n/// @author Fei Protocol, modified by Connext. Fei reference:\\n///         https://github.com/fei-protocol/fei-protocol-core/blob/develop/contracts/timelocks/LinearTimelockedDelegator.sol\\n/// @dev https://eips.ethereum.org/EIPS/eip-4758 -> inclusion seems likely within\\n///      the next 4 years, so selfdestruct was removed from withdraw()\\n/// @dev\\ncontract Delegatee is Ownable {\\n  IDelegatable public token;\\n\\n  /// @notice Delegatee constructor\\n  /// @param _delegatee the address to delegate token to\\n  /// @param _token the delegatable token address\\n  constructor(address _delegatee, address _token) {\\n    token = IDelegatable(_token);\\n    token.delegate(_delegatee);\\n  }\\n\\n  /// @notice send token back to timelock\\n  function withdraw() public onlyOwner {\\n    IDelegatable _token = token;\\n    uint256 balance = _token.balanceOf(address(this));\\n    _token.transfer(owner(), balance);\\n  }\\n}\\n\\n/// @title a timelock for token allowing for sub-delegation\\n/// @author Fei Protocol\\n/// @notice allows the timelocked token to be delegated by the beneficiary while locked\\ncontract TimelockedDelegator is ITimelockedDelegator, LinearTokenTimelock {\\n  /// @notice associated delegate proxy contract for a delegatee\\n  mapping(address => address) public override delegateContract;\\n\\n  /// @notice associated delegated amount of token for a delegatee\\n  /// @dev Using as source of truth to prevent accounting errors by transferring to Delegate contracts\\n  mapping(address => uint256) public override delegateAmount;\\n\\n  /// @notice the token contract\\n  IDelegatable public override token;\\n\\n  /// @notice the total delegated amount of token\\n  uint256 public override totalDelegated;\\n\\n  /// @notice Delegatee constructor\\n  /// @param _token the token address\\n  /// @param _beneficiary default delegate, admin, and timelock beneficiary\\n  /// @param _clawbackAdmin who can withdraw unclaimed tokens if timelock halted. use address(0) if there\\n  ///        shouldn't be clawbacks for this contract\\n  /// @param _cliffDuration cliff of unlock, in seconds. Use 0 for no cliff.\\n  /// @param _startTime start time of unlock period, in seconds. Use 0 for now.\\n  /// @param _duration duration of the token timelock window\\n  constructor(\\n    address _token,\\n    address _beneficiary,\\n    address _clawbackAdmin,\\n    uint256 _cliffDuration,\\n    uint256 _startTime,\\n    uint256 _duration\\n  ) LinearTokenTimelock(_beneficiary, _duration, _token, _cliffDuration, _clawbackAdmin, _startTime) {\\n    token = IDelegatable(_token);\\n    token.delegate(_beneficiary);\\n  }\\n\\n  /// @notice delegate locked token to a delegatee\\n  /// @param delegatee the target address to delegate to\\n  /// @param amount the amount of token to delegate. Will increment existing delegated token\\n  function delegate(address delegatee, uint256 amount) public override onlyBeneficiary {\\n    require(amount <= _tokenBalance(), \\\"TimelockedDelegator: Not enough balance\\\");\\n\\n    // withdraw and include an existing delegation\\n    if (delegateContract[delegatee] != address(0)) {\\n      amount = amount + undelegate(delegatee);\\n    }\\n\\n    IDelegatable _token = token;\\n    address _delegateContract = address(new Delegatee(delegatee, address(_token)));\\n    delegateContract[delegatee] = _delegateContract;\\n\\n    delegateAmount[delegatee] = amount;\\n    totalDelegated = totalDelegated + amount;\\n\\n    _token.transfer(_delegateContract, amount);\\n\\n    emit Delegate(delegatee, amount);\\n  }\\n\\n  /// @notice return delegated token to the timelock\\n  /// @param delegatee the target address to undelegate from\\n  /// @return the amount of token returned\\n  function undelegate(address delegatee) public override onlyBeneficiary returns (uint256) {\\n    address _delegateContract = delegateContract[delegatee];\\n    require(_delegateContract != address(0), \\\"TimelockedDelegator: Delegate contract nonexistent\\\");\\n\\n    Delegatee(_delegateContract).withdraw();\\n\\n    uint256 amount = delegateAmount[delegatee];\\n    totalDelegated = totalDelegated - amount;\\n\\n    delegateContract[delegatee] = address(0);\\n    delegateAmount[delegatee] = 0;\\n\\n    emit Undelegate(delegatee, amount);\\n\\n    return amount;\\n  }\\n\\n  /// @notice calculate total token held plus delegated\\n  /// @dev used by LinearTokenTimelock to determine the released amount\\n  function totalToken() public view override returns (uint256) {\\n    return _tokenBalance() + totalDelegated;\\n  }\\n\\n  /// @notice accept beneficiary role over timelocked token. Delegates all held (non-subdelegated) token to beneficiary\\n  function acceptBeneficiary() public override {\\n    _setBeneficiary(msg.sender);\\n    token.delegate(msg.sender);\\n  }\\n\\n  function _tokenBalance() internal view returns (uint256) {\\n    return token.balanceOf(address(this));\\n  }\\n}\\n\",\"keccak256\":\"0x6f52720f5950186dcdd33469a724dfbe24c7df70638915f1e8ce56716c9c3c5b\",\"license\":\"GPL-3.0-or-later\"},\"src/timelocks/TokenTimelock.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.8.19;\\n\\n// Modified from: https://github.com/fei-protocol/fei-protocol-core/blob/develop/contracts/timelocks/TokenTimelock.sol\\n\\n// Inspired by OpenZeppelin TokenTimelock contract\\n// Reference: https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/TokenTimelock.sol\\n\\nimport {Timed} from \\\"./Timed.sol\\\";\\nimport {ITokenTimelock, IERC20} from \\\"./interface/ITokenTimelock.sol\\\";\\n\\nabstract contract TokenTimelock is ITokenTimelock, Timed {\\n  /// @notice ERC20 basic token contract being held in timelock\\n  IERC20 public override lockedToken;\\n\\n  /// @notice beneficiary of tokens after they are released\\n  address public override beneficiary;\\n\\n  /// @notice pending beneficiary appointed by current beneficiary\\n  address public override pendingBeneficiary;\\n\\n  /// @notice initial balance of lockedToken\\n  uint256 public override initialBalance;\\n\\n  uint256 internal lastBalance;\\n\\n  /// @notice number of seconds before releasing is allowed\\n  uint256 public immutable cliffSeconds;\\n\\n  address public immutable clawbackAdmin;\\n\\n  constructor(\\n    address _beneficiary,\\n    uint256 _duration,\\n    uint256 _cliffSeconds,\\n    address _lockedToken,\\n    address _clawbackAdmin\\n  ) Timed(_duration) {\\n    require(_duration != 0, \\\"TokenTimelock: duration is 0\\\");\\n    require(_beneficiary != address(0), \\\"TokenTimelock: Beneficiary must not be 0 address\\\");\\n\\n    beneficiary = _beneficiary;\\n    _initTimed();\\n\\n    _setLockedToken(_lockedToken);\\n\\n    cliffSeconds = _cliffSeconds;\\n\\n    clawbackAdmin = _clawbackAdmin;\\n  }\\n\\n  // Prevents incoming LP tokens from messing up calculations\\n  modifier balanceCheck() {\\n    if (totalToken() > lastBalance) {\\n      uint256 delta = totalToken() - lastBalance;\\n      initialBalance = initialBalance + delta;\\n    }\\n    _;\\n    lastBalance = totalToken();\\n  }\\n\\n  modifier onlyBeneficiary() {\\n    require(msg.sender == beneficiary, \\\"TokenTimelock: Caller is not a beneficiary\\\");\\n    _;\\n  }\\n\\n  /// @notice releases `amount` unlocked tokens to address `to`\\n  function release(address to, uint256 amount) external override onlyBeneficiary balanceCheck {\\n    require(amount != 0, \\\"TokenTimelock: no amount desired\\\");\\n    require(passedCliff(), \\\"TokenTimelock: Cliff not passed\\\");\\n\\n    uint256 available = availableForRelease();\\n    require(amount <= available, \\\"TokenTimelock: not enough released tokens\\\");\\n\\n    _release(to, amount);\\n  }\\n\\n  /// @notice releases maximum unlocked tokens to address `to`\\n  function releaseMax(address to) external override onlyBeneficiary balanceCheck {\\n    require(passedCliff(), \\\"TokenTimelock: Cliff not passed\\\");\\n    _release(to, availableForRelease());\\n  }\\n\\n  /// @notice the total amount of tokens held by timelock\\n  function totalToken() public view virtual override returns (uint256) {\\n    return lockedToken.balanceOf(address(this));\\n  }\\n\\n  /// @notice amount of tokens released to beneficiary\\n  function alreadyReleasedAmount() public view override returns (uint256) {\\n    return initialBalance == 0 ? 0 : initialBalance - totalToken();\\n  }\\n\\n  /// @notice amount of held tokens unlocked and available for release\\n  function availableForRelease() public view override returns (uint256) {\\n    uint256 elapsed = timeSinceStart();\\n\\n    uint256 totalAvailable = _proportionAvailable(initialBalance, elapsed, duration);\\n    uint256 netAvailable = totalAvailable - alreadyReleasedAmount();\\n    return netAvailable;\\n  }\\n\\n  /// @notice current beneficiary can appoint new beneficiary, which must be accepted\\n  function setPendingBeneficiary(address _pendingBeneficiary) public override onlyBeneficiary {\\n    pendingBeneficiary = _pendingBeneficiary;\\n    emit PendingBeneficiaryUpdate(_pendingBeneficiary);\\n  }\\n\\n  /// @notice pending beneficiary accepts new beneficiary\\n  function acceptBeneficiary() public virtual override {\\n    _setBeneficiary(msg.sender);\\n  }\\n\\n  function clawback() public balanceCheck {\\n    require(msg.sender == clawbackAdmin, \\\"TokenTimelock: Only clawbackAdmin\\\");\\n    if (passedCliff()) {\\n      _release(beneficiary, availableForRelease());\\n    }\\n    _release(clawbackAdmin, totalToken());\\n  }\\n\\n  function passedCliff() public view returns (bool) {\\n    return timeSinceStart() >= cliffSeconds;\\n  }\\n\\n  function _proportionAvailable(\\n    uint256 initialBalance,\\n    uint256 elapsed,\\n    uint256 duration\\n  ) internal pure virtual returns (uint256);\\n\\n  function _setBeneficiary(address newBeneficiary) internal {\\n    require(newBeneficiary == pendingBeneficiary, \\\"TokenTimelock: Caller is not pending beneficiary\\\");\\n    beneficiary = newBeneficiary;\\n    emit BeneficiaryUpdate(newBeneficiary);\\n    pendingBeneficiary = address(0);\\n  }\\n\\n  function _setLockedToken(address tokenAddress) internal {\\n    lockedToken = IERC20(tokenAddress);\\n  }\\n\\n  function _release(address to, uint256 amount) internal {\\n    lockedToken.transfer(to, amount);\\n    emit Release(beneficiary, to, amount);\\n  }\\n}\\n\",\"keccak256\":\"0xa98906076652e0ae11c084143a4c5463f1532dd484de803cc49a74abbb263ef1\",\"license\":\"GPL-3.0-or-later\"},\"src/timelocks/interface/ITimelockedDelegator.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.8.19;\\n\\nimport {IERC20} from \\\"lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IDelegatable is IERC20 {\\n  function delegate(address delegatee) external;\\n}\\n\\n/// @title TimelockedDelegator interface\\n/// @author Fei Protocol\\n/// @dev Modified from: https://github.com/fei-protocol/fei-protocol-core/blob/develop/contracts/timelocks/ITimelockedDelegator.sol\\ninterface ITimelockedDelegator {\\n  // ----------- Events -----------\\n\\n  event Delegate(address indexed _delegatee, uint256 _amount);\\n\\n  event Undelegate(address indexed _delegatee, uint256 _amount);\\n\\n  // ----------- Beneficiary only state changing api -----------\\n\\n  function delegate(address delegatee, uint256 amount) external;\\n\\n  function undelegate(address delegatee) external returns (uint256);\\n\\n  // ----------- Getters -----------\\n\\n  function delegateContract(address delegatee) external view returns (address);\\n\\n  function delegateAmount(address delegatee) external view returns (uint256);\\n\\n  function totalDelegated() external view returns (uint256);\\n\\n  function token() external view returns (IDelegatable);\\n}\\n\",\"keccak256\":\"0x0185019ad6a6ddd40ba6252132d6dfb7feb2b74410de5aa92d53ec5e0982a944\",\"license\":\"GPL-3.0-or-later\"},\"src/timelocks/interface/ITokenTimelock.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.8.19;\\n\\nimport {IERC20} from \\\"lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol\\\";\\n\\n/// @title TokenTimelock interface\\n/// @author Fei Protocol\\n/// @dev Modified from: https://github.com/fei-protocol/fei-protocol-core/blob/develop/contracts/timelocks/ITokenTimelock.sol\\ninterface ITokenTimelock {\\n  // ----------- Events -----------\\n\\n  event Release(address indexed _beneficiary, address indexed _recipient, uint256 _amount);\\n  event BeneficiaryUpdate(address indexed _beneficiary);\\n  event PendingBeneficiaryUpdate(address indexed _pendingBeneficiary);\\n\\n  // ----------- State changing api -----------\\n\\n  function release(address to, uint256 amount) external;\\n\\n  function releaseMax(address to) external;\\n\\n  function setPendingBeneficiary(address _pendingBeneficiary) external;\\n\\n  function acceptBeneficiary() external;\\n\\n  // ----------- Getters -----------\\n\\n  function lockedToken() external view returns (IERC20);\\n\\n  function beneficiary() external view returns (address);\\n\\n  function pendingBeneficiary() external view returns (address);\\n\\n  function initialBalance() external view returns (uint256);\\n\\n  function availableForRelease() external view returns (uint256);\\n\\n  function totalToken() external view returns (uint256);\\n\\n  function alreadyReleasedAmount() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x337a4339c7cf23f72d360170ccac94e71fd64dc0a40340818170534cb236b5e0\",\"license\":\"GPL-3.0-or-later\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b506141a9806100206000396000f3fe60806040523480156200001157600080fd5b50600436106200003a5760003560e01c8063170a254e146200003f57806351659f1a1462000075575b600080fd5b6200005d60048036038101906200005791906200061e565b620000ab565b6040516200006c9190620006f8565b60405180910390f35b6200009360048036038101906200008d919062000715565b6200015d565b604051620000a29190620006f8565b60405180910390f35b6000620000be8989898989898962000188565b9050600082111562000151578873ffffffffffffffffffffffffffffffffffffffff166323b872dd3383856040518463ffffffff1660e01b81526004016200010993929190620007ae565b6020604051808303816000875af115801562000129573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200014f919062000828565b505b98975050505050505050565b6000806200016f8686898787620002bb565b90506200017c81620002f9565b91505095945050505050565b6000806200019a8989338887620002bb565b9050600060405180602001620001b0906200056b565b6020820181038252601f19601f8201166040525090506000818b8b8b8b8b8b604051602001620001e6969594939291906200085a565b6040516020818303038152906040526040516020016200020892919062000940565b60405160208183030381529060405290506200022783826000620003b2565b93508973ffffffffffffffffffffffffffffffffffffffff168b73ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff167f9a4ba2c17e8c99abb007ba4c6db3e815dfd367929a65096d1c64477a8bdb0e9f8c8c8c8c604051620002a5949392919062000968565b60405180910390a4505050979650505050505050565b60008585858585604051602001620002d895949392919062000a2a565b60405160208183030381529060405280519060200120905095945050505050565b6000806200037560ff60f81b30856040518060400160405280601081526020017f67363d3d37363d34f03d5260086018f3000000000000000000000000000000008152508051906020012060405160200162000359949392919062000b13565b604051602081830303815290604052805190602001206200055e565b9050620003aa816040516020016200038e919062000c14565b604051602081830303815290604052805190602001206200055e565b915050919050565b6000806040518060400160405280601081526020017f67363d3d37363d34f03d5260086018f30000000000000000000000000000000081525090506000858251602084016000f59050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036200046d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620004649062000cac565b60405180910390fd5b6200047886620002f9565b925060008173ffffffffffffffffffffffffffffffffffffffff168587604051620004a4919062000cce565b60006040518083038185875af1925050503d8060008114620004e3576040519150601f19603f3d011682016040523d82523d6000602084013e620004e8565b606091505b5050905080801562000512575060008473ffffffffffffffffffffffffffffffffffffffff163b14155b62000554576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016200054b9062000d37565b60405180910390fd5b5050509392505050565b60008160001c9050919050565b61341a8062000d5a83390190565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620005ab826200057e565b9050919050565b620005bd816200059e565b8114620005c957600080fd5b50565b600081359050620005dd81620005b2565b92915050565b6000819050919050565b620005f881620005e3565b81146200060457600080fd5b50565b6000813590506200061881620005ed565b92915050565b600080600080600080600080610100898b03121562000642576200064162000579565b5b6000620006528b828c01620005cc565b9850506020620006658b828c01620005cc565b9750506040620006788b828c01620005cc565b96505060606200068b8b828c0162000607565b95505060806200069e8b828c0162000607565b94505060a0620006b18b828c0162000607565b93505060c0620006c48b828c0162000607565b92505060e0620006d78b828c0162000607565b9150509295985092959890939650565b620006f2816200059e565b82525050565b60006020820190506200070f6000830184620006e7565b92915050565b600080600080600060a0868803121562000734576200073362000579565b5b60006200074488828901620005cc565b95505060206200075788828901620005cc565b94505060406200076a88828901620005cc565b93505060606200077d8882890162000607565b9250506080620007908882890162000607565b9150509295509295909350565b620007a881620005e3565b82525050565b6000606082019050620007c56000830186620006e7565b620007d46020830185620006e7565b620007e360408301846200079d565b949350505050565b60008115159050919050565b6200080281620007eb565b81146200080e57600080fd5b50565b6000815190506200082281620007f7565b92915050565b60006020828403121562000841576200084062000579565b5b6000620008518482850162000811565b91505092915050565b600060c082019050620008716000830189620006e7565b620008806020830188620006e7565b6200088f6040830187620006e7565b6200089e60608301866200079d565b620008ad60808301856200079d565b620008bc60a08301846200079d565b979650505050505050565b600081519050919050565b600081905092915050565b60005b83811015620008fd578082015181840152602081019050620008e0565b60008484015250505050565b60006200091682620008c7565b620009228185620008d2565b935062000934818560208601620008dd565b80840191505092915050565b60006200094e828562000909565b91506200095c828462000909565b91508190509392505050565b60006080820190506200097f6000830187620006e7565b6200098e60208301866200079d565b6200099d60408301856200079d565b620009ac60608301846200079d565b95945050505050565b60008160601b9050919050565b6000620009cf82620009b5565b9050919050565b6000620009e382620009c2565b9050919050565b620009ff620009f9826200059e565b620009d6565b82525050565b6000819050919050565b62000a2462000a1e82620005e3565b62000a05565b82525050565b600062000a388288620009ea565b60148201915062000a4a8287620009ea565b60148201915062000a5c8286620009ea565b60148201915062000a6e828562000a0f565b60208201915062000a80828462000a0f565b6020820191508190509695505050505050565b60007fff0000000000000000000000000000000000000000000000000000000000000082169050919050565b6000819050919050565b62000ade62000ad88262000a93565b62000abf565b82525050565b6000819050919050565b6000819050919050565b62000b0d62000b078262000ae4565b62000aee565b82525050565b600062000b21828762000ac9565b60018201915062000b338286620009ea565b60148201915062000b45828562000af8565b60208201915062000b57828462000af8565b60208201915081905095945050505050565b600081905092915050565b7fd694000000000000000000000000000000000000000000000000000000000000600082015250565b600062000bac60028362000b69565b915062000bb98262000b74565b600282019050919050565b7f0100000000000000000000000000000000000000000000000000000000000000600082015250565b600062000bfc60018362000b69565b915062000c098262000bc4565b600182019050919050565b600062000c218262000b9d565b915062000c2f8284620009ea565b60148201915062000c408262000bed565b915081905092915050565b600082825260208201905092915050565b7f4445504c4f594d454e545f4641494c4544000000000000000000000000000000600082015250565b600062000c9460118362000c4b565b915062000ca18262000c5c565b602082019050919050565b6000602082019050818103600083015262000cc78162000c85565b9050919050565b600062000cdc828462000909565b915081905092915050565b7f494e495449414c495a4154494f4e5f4641494c45440000000000000000000000600082015250565b600062000d1f60158362000c4b565b915062000d2c8262000ce7565b602082019050919050565b6000602082019050818103600083015262000d528162000d10565b905091905056fe60c06040523480156200001157600080fd5b506040516200341a3803806200341a833981810160405281019062000037919062000463565b8481878587868585848685836200005481620002a560201b60201c565b50600084036200009b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620000929062000560565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff16036200010d576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016200010490620005f8565b60405180910390fd5b84600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506200015e6200033860201b60201c565b6200016f826200037a60201b60201c565b82608081815250508073ffffffffffffffffffffffffffffffffffffffff1660a08173ffffffffffffffffffffffffffffffffffffffff1681525050505050505060008114620001c157806000819055505b50505050505085600960006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16635c19a95c866040518263ffffffff1660e01b81526004016200026591906200062b565b600060405180830381600087803b1580156200028057600080fd5b505af115801562000295573d6000803e3d6000fd5b5050505050505050505062000715565b60008103620002eb576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620002e29062000698565b60405180910390fd5b60006001549050816001819055507f53356ce8408d6a56b0e61bcd41861e12eb5772987856f889e38e4aba4ffa104c81836040516200032c929190620006cb565b60405180910390a15050565b426000819055507fd1dbb2ce8081405078443ef34dae718285114121a39370b14ef01b9d2b0a208342604051620003709190620006f8565b60405180910390a1565b80600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620003f082620003c3565b9050919050565b6200040281620003e3565b81146200040e57600080fd5b50565b6000815190506200042281620003f7565b92915050565b6000819050919050565b6200043d8162000428565b81146200044957600080fd5b50565b6000815190506200045d8162000432565b92915050565b60008060008060008060c08789031215620004835762000482620003be565b5b60006200049389828a0162000411565b9650506020620004a689828a0162000411565b9550506040620004b989828a0162000411565b9450506060620004cc89828a016200044c565b9350506080620004df89828a016200044c565b92505060a0620004f289828a016200044c565b9150509295509295509295565b600082825260208201905092915050565b7f546f6b656e54696d656c6f636b3a206475726174696f6e206973203000000000600082015250565b600062000548601c83620004ff565b9150620005558262000510565b602082019050919050565b600060208201905081810360008301526200057b8162000539565b9050919050565b7f546f6b656e54696d656c6f636b3a2042656e6566696369617279206d7573742060008201527f6e6f742062652030206164647265737300000000000000000000000000000000602082015250565b6000620005e0603083620004ff565b9150620005ed8262000582565b604082019050919050565b600060208201905081810360008301526200061381620005d1565b9050919050565b6200062581620003e3565b82525050565b60006020820190506200064260008301846200061a565b92915050565b7f54696d65643a207a65726f206475726174696f6e000000000000000000000000600082015250565b600062000680601483620004ff565b91506200068d8262000648565b602082019050919050565b60006020820190508181036000830152620006b38162000671565b9050919050565b620006c58162000428565b82525050565b6000604082019050620006e26000830185620006ba565b620006f16020830184620006ba565b9392505050565b60006020820190506200070f6000830184620006ba565b92915050565b60805160a051612cca6200075060003960008181610b3b01528181610bae0152610c8b015260008181610d640152610eae0152612cca6000f3fe60806040523480156200001157600080fd5b5060043610620001d15760003560e01c8063626be5671162000111578063ae951b2e11620000a5578063c5fa55a5116200007b578063c5fa55a514620004c6578063cf4f363014620004e6578063da8be864146200051c578063fc0c546a146200055257620001d1565b8063ae951b2e1462000462578063b38c43e31462000484578063b888c47914620004a457620001d1565b806380d04de811620000e757806380d04de814620003c65780638341ee7214620003e85780639e88d77e146200040a578063acc4bd08146200044057620001d1565b8063626be567146200036057806367fc6dea146200038257806378e9792514620003a457620001d1565b806318369a2a116200018957806338af3eed116200015f57806338af3eed14620002ee578063427db380146200031057806344f61ab714620003325780634929e162146200035457620001d1565b806318369a2a146200029e5780632526d96014620002c057806328b5030b14620002cc57620001d1565b8062d89b3314620001d6578063026e402b14620001f85780630357371d14620002185780630f45cc8114620002385780630fb5a6b4146200025a57806310c48245146200027c575b600080fd5b620001e062000574565b604051620001ef9190620018de565b60405180910390f35b620002166004803603810190620002109190620019a0565b62000581565b005b620002366004803603810190620002309190620019a0565b6200092a565b005b6200024262000b0d565b60405162000251919062001a52565b60405180910390f35b6200026462000b33565b60405162000273919062001a80565b60405180910390f35b6200028662000b39565b60405162000295919062001aae565b60405180910390f35b620002a862000b5d565b604051620002b7919062001a80565b60405180910390f35b620002ca62000b63565b005b620002d662000ccc565b604051620002e5919062001a80565b60405180910390f35b620002f862000d14565b60405162000307919062001aae565b60405180910390f35b6200031a62000d3a565b60405162000329919062001aae565b60405180910390f35b6200033c62000d60565b6040516200034b9190620018de565b60405180910390f35b6200035e62000d94565b005b6200036a62000e32565b60405162000379919062001a80565b60405180910390f35b6200038c62000e52565b6040516200039b919062001a80565b60405180910390f35b620003ae62000ea0565b604051620003bd919062001a80565b60405180910390f35b620003d062000ea6565b604051620003df919062001a80565b60405180910390f35b620003f262000eac565b60405162000401919062001a80565b60405180910390f35b62000428600480360381019062000422919062001acb565b62000ed0565b60405162000437919062001a80565b60405180910390f35b6200044a62000ee8565b60405162000459919062001a80565b60405180910390f35b6200046c62000f08565b6040516200047b9190620018de565b60405180910390f35b620004a260048036038101906200049c919062001acb565b62000f1b565b005b620004ae6200106b565b604051620004bd919062001a80565b60405180910390f35b620004e46004803603810190620004de919062001acb565b6200109e565b005b620005046004803603810190620004fe919062001acb565b620011b8565b60405162000513919062001aae565b60405180910390f35b6200053a600480360381019062000534919062001acb565b620011eb565b60405162000549919062001a80565b60405180910390f35b6200055c62001530565b6040516200056b919062001b22565b60405180910390f35b6000806000541415905090565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161462000614576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016200060b9062001bc6565b60405180910390fd5b6200061e62001556565b81111562000663576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016200065a9062001c5e565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff16600760008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161462000712576200070282620011eb565b816200070f919062001caf565b90505b6000600960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600083826040516200074b90620018b3565b6200075892919062001cea565b604051809103906000f08015801562000775573d6000803e3d6000fd5b50905080600760008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555082600860008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555082600a546200084a919062001caf565b600a819055508173ffffffffffffffffffffffffffffffffffffffff1663a9059cbb82856040518363ffffffff1660e01b81526004016200088d92919062001d17565b6020604051808303816000875af1158015620008ad573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620008d3919062001d75565b508373ffffffffffffffffffffffffffffffffffffffff167fb0d234274aef7a61aa5a2eb44c23881ebf46a068cccbd413c978bcbd555fe17f846040516200091c919062001a80565b60405180910390a250505050565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614620009bd576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620009b49062001bc6565b60405180910390fd5b600654620009ca62000e32565b111562000a06576000600654620009e062000e32565b620009ec919062001da7565b905080600554620009fe919062001caf565b600581905550505b6000810362000a4c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040162000a439062001e32565b60405180910390fd5b62000a5662000d60565b62000a98576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040162000a8f9062001ea4565b60405180910390fd5b600062000aa462000ccc565b90508082111562000aec576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040162000ae39062001f3c565b60405180910390fd5b62000af88383620015fe565b5062000b0362000e32565b6006819055505050565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60015481565b7f000000000000000000000000000000000000000000000000000000000000000081565b60055481565b60065462000b7062000e32565b111562000bac57600060065462000b8662000e32565b62000b92919062001da7565b90508060055462000ba4919062001caf565b600581905550505b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161462000c3d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040162000c349062001fd4565b60405180910390fd5b62000c4762000d60565b1562000c855762000c84600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1662000c7e62000ccc565b620015fe565b5b62000cba7f000000000000000000000000000000000000000000000000000000000000000062000cb462000e32565b620015fe565b62000cc462000e32565b600681905550565b60008062000cd962000e52565b9050600062000cee6005548360015462001731565b9050600062000cfc6200106b565b8262000d09919062001da7565b905080935050505090565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60007f000000000000000000000000000000000000000000000000000000000000000062000d8d62000e52565b1015905090565b62000d9f3362001757565b600960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16635c19a95c336040518263ffffffff1660e01b815260040162000dfc919062001aae565b600060405180830381600087803b15801562000e1757600080fd5b505af115801562000e2c573d6000803e3d6000fd5b50505050565b6000600a5462000e4162001556565b62000e4d919062001caf565b905090565b600062000e5e62000574565b62000e6d576000905062000e9d565b60006001549050600080544262000e85919062001da7565b905081811162000e96578062000e98565b815b925050505b90565b60005481565b600a5481565b7f000000000000000000000000000000000000000000000000000000000000000081565b60086020528060005260406000206000915090505481565b600062000ef462000e52565b60015462000f03919062001da7565b905090565b60008062000f1562000ee8565b14905090565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161462000fae576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040162000fa59062001bc6565b60405180910390fd5b60065462000fbb62000e32565b111562000ff757600060065462000fd162000e32565b62000fdd919062001da7565b90508060055462000fef919062001caf565b600581905550505b6200100162000d60565b62001043576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016200103a9062001ea4565b60405180910390fd5b62001058816200105262000ccc565b620015fe565b6200106262000e32565b60068190555050565b6000806005541462001096576200108162000e32565b60055462001090919062001da7565b62001099565b60005b905090565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161462001131576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620011289062001bc6565b60405180910390fd5b80600460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508073ffffffffffffffffffffffffffffffffffffffff167f636f16dafcc1e5b7ae44b2a7fd661757f160672716bb47a02c7d3f5108be49a060405160405180910390a250565b60076020528060005260406000206000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161462001280576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620012779062001bc6565b60405180910390fd5b6000600760008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff160362001356576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016200134d906200206c565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff16633ccfd60b6040518163ffffffff1660e01b8152600401600060405180830381600087803b1580156200139f57600080fd5b505af1158015620013b4573d6000803e3d6000fd5b505050506000600860008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905080600a546200140c919062001da7565b600a819055506000600760008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000600860008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508373ffffffffffffffffffffffffffffffffffffffff167f17659a1d1f57d2e58b7063ee8b518b50d00bf3e5c0d8224b68ba865e4725a0b4826040516200151e919062001a80565b60405180910390a28092505050919050565b600960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000600960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401620015b5919062001aae565b602060405180830381865afa158015620015d3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620015f99190620020a5565b905090565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb83836040518363ffffffff1660e01b81526004016200165d92919062001d17565b6020604051808303816000875af11580156200167d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620016a3919062001d75565b508173ffffffffffffffffffffffffffffffffffffffff16600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167fcb54aad3bd772fcfe1bc124e01bd1a91a91c9d80126d8b3014c4d9e687d5ca488360405162001725919062001a80565b60405180910390a35050565b6000818385620017429190620020d7565b6200174e919062002151565b90509392505050565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614620017ea576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620017e190620021ff565b60405180910390fd5b80600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508073ffffffffffffffffffffffffffffffffffffffff167fe356863d8c81d46ff30d41a6332e1d04d2fb6c0f043fa6554e3d1e1deae95a8a60405160405180910390a26000600460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b610a73806200222283390190565b60008115159050919050565b620018d881620018c1565b82525050565b6000602082019050620018f56000830184620018cd565b92915050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006200192d8262001900565b9050919050565b6200193f8162001920565b81146200194b57600080fd5b50565b6000813590506200195f8162001934565b92915050565b6000819050919050565b6200197a8162001965565b81146200198657600080fd5b50565b6000813590506200199a816200196f565b92915050565b60008060408385031215620019ba57620019b9620018fb565b5b6000620019ca858286016200194e565b9250506020620019dd8582860162001989565b9150509250929050565b6000819050919050565b600062001a1262001a0c62001a068462001900565b620019e7565b62001900565b9050919050565b600062001a2682620019f1565b9050919050565b600062001a3a8262001a19565b9050919050565b62001a4c8162001a2d565b82525050565b600060208201905062001a69600083018462001a41565b92915050565b62001a7a8162001965565b82525050565b600060208201905062001a97600083018462001a6f565b92915050565b62001aa88162001920565b82525050565b600060208201905062001ac5600083018462001a9d565b92915050565b60006020828403121562001ae45762001ae3620018fb565b5b600062001af4848285016200194e565b91505092915050565b600062001b0a8262001a19565b9050919050565b62001b1c8162001afd565b82525050565b600060208201905062001b39600083018462001b11565b92915050565b600082825260208201905092915050565b7f546f6b656e54696d656c6f636b3a2043616c6c6572206973206e6f742061206260008201527f656e656669636961727900000000000000000000000000000000000000000000602082015250565b600062001bae602a8362001b3f565b915062001bbb8262001b50565b604082019050919050565b6000602082019050818103600083015262001be18162001b9f565b9050919050565b7f54696d656c6f636b656444656c656761746f723a204e6f7420656e6f7567682060008201527f62616c616e636500000000000000000000000000000000000000000000000000602082015250565b600062001c4660278362001b3f565b915062001c538262001be8565b604082019050919050565b6000602082019050818103600083015262001c798162001c37565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600062001cbc8262001965565b915062001cc98362001965565b925082820190508082111562001ce45762001ce362001c80565b5b92915050565b600060408201905062001d01600083018562001a9d565b62001d10602083018462001a9d565b9392505050565b600060408201905062001d2e600083018562001a9d565b62001d3d602083018462001a6f565b9392505050565b62001d4f81620018c1565b811462001d5b57600080fd5b50565b60008151905062001d6f8162001d44565b92915050565b60006020828403121562001d8e5762001d8d620018fb565b5b600062001d9e8482850162001d5e565b91505092915050565b600062001db48262001965565b915062001dc18362001965565b925082820390508181111562001ddc5762001ddb62001c80565b5b92915050565b7f546f6b656e54696d656c6f636b3a206e6f20616d6f756e742064657369726564600082015250565b600062001e1a60208362001b3f565b915062001e278262001de2565b602082019050919050565b6000602082019050818103600083015262001e4d8162001e0b565b9050919050565b7f546f6b656e54696d656c6f636b3a20436c696666206e6f742070617373656400600082015250565b600062001e8c601f8362001b3f565b915062001e998262001e54565b602082019050919050565b6000602082019050818103600083015262001ebf8162001e7d565b9050919050565b7f546f6b656e54696d656c6f636b3a206e6f7420656e6f7567682072656c65617360008201527f656420746f6b656e730000000000000000000000000000000000000000000000602082015250565b600062001f2460298362001b3f565b915062001f318262001ec6565b604082019050919050565b6000602082019050818103600083015262001f578162001f15565b9050919050565b7f546f6b656e54696d656c6f636b3a204f6e6c7920636c61776261636b41646d6960008201527f6e00000000000000000000000000000000000000000000000000000000000000602082015250565b600062001fbc60218362001b3f565b915062001fc98262001f5e565b604082019050919050565b6000602082019050818103600083015262001fef8162001fad565b9050919050565b7f54696d656c6f636b656444656c656761746f723a2044656c656761746520636f60008201527f6e7472616374206e6f6e6578697374656e740000000000000000000000000000602082015250565b60006200205460328362001b3f565b9150620020618262001ff6565b604082019050919050565b60006020820190508181036000830152620020878162002045565b9050919050565b6000815190506200209f816200196f565b92915050565b600060208284031215620020be57620020bd620018fb565b5b6000620020ce848285016200208e565b91505092915050565b6000620020e48262001965565b9150620020f18362001965565b9250828202620021018162001965565b915082820484148315176200211b576200211a62001c80565b5b5092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b60006200215e8262001965565b91506200216b8362001965565b9250826200217e576200217d62002122565b5b828204905092915050565b7f546f6b656e54696d656c6f636b3a2043616c6c6572206973206e6f742070656e60008201527f64696e672062656e656669636961727900000000000000000000000000000000602082015250565b6000620021e760308362001b3f565b9150620021f48262002189565b604082019050919050565b600060208201905081810360008301526200221a81620021d8565b905091905056fe608060405234801561001057600080fd5b50604051610a73380380610a7383398181016040528101906100329190610252565b61004e61004361012360201b60201c565b61012b60201b60201c565b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16635c19a95c836040518263ffffffff1660e01b81526004016100ea91906102a1565b600060405180830381600087803b15801561010457600080fd5b505af1158015610118573d6000803e3d6000fd5b5050505050506102bc565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061021f826101f4565b9050919050565b61022f81610214565b811461023a57600080fd5b50565b60008151905061024c81610226565b92915050565b60008060408385031215610269576102686101ef565b5b60006102778582860161023d565b92505060206102888582860161023d565b9150509250929050565b61029b81610214565b82525050565b60006020820190506102b66000830184610292565b92915050565b6107a8806102cb6000396000f3fe608060405234801561001057600080fd5b50600436106100575760003560e01c80633ccfd60b1461005c578063715018a6146100665780638da5cb5b14610070578063f2fde38b1461008e578063fc0c546a146100aa575b600080fd5b6100646100c8565b005b61006e6101ff565b005b610078610213565b6040516100859190610470565b60405180910390f35b6100a860048036038101906100a391906104bc565b61023c565b005b6100b26102bf565b6040516100bf9190610548565b60405180910390f35b6100d06102e5565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060008173ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016101329190610470565b602060405180830381865afa15801561014f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101739190610599565b90508173ffffffffffffffffffffffffffffffffffffffff1663a9059cbb610199610213565b836040518363ffffffff1660e01b81526004016101b79291906105d5565b6020604051808303816000875af11580156101d6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101fa9190610636565b505050565b6102076102e5565b6102116000610363565b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6102446102e5565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036102b3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102aa906106e6565b60405180910390fd5b6102bc81610363565b50565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6102ed610427565b73ffffffffffffffffffffffffffffffffffffffff1661030b610213565b73ffffffffffffffffffffffffffffffffffffffff1614610361576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161035890610752565b60405180910390fd5b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600033905090565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061045a8261042f565b9050919050565b61046a8161044f565b82525050565b60006020820190506104856000830184610461565b92915050565b600080fd5b6104998161044f565b81146104a457600080fd5b50565b6000813590506104b681610490565b92915050565b6000602082840312156104d2576104d161048b565b5b60006104e0848285016104a7565b91505092915050565b6000819050919050565b600061050e6105096105048461042f565b6104e9565b61042f565b9050919050565b6000610520826104f3565b9050919050565b600061053282610515565b9050919050565b61054281610527565b82525050565b600060208201905061055d6000830184610539565b92915050565b6000819050919050565b61057681610563565b811461058157600080fd5b50565b6000815190506105938161056d565b92915050565b6000602082840312156105af576105ae61048b565b5b60006105bd84828501610584565b91505092915050565b6105cf81610563565b82525050565b60006040820190506105ea6000830185610461565b6105f760208301846105c6565b9392505050565b60008115159050919050565b610613816105fe565b811461061e57600080fd5b50565b6000815190506106308161060a565b92915050565b60006020828403121561064c5761064b61048b565b5b600061065a84828501610621565b91505092915050565b600082825260208201905092915050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b60006106d0602683610663565b91506106db82610674565b604082019050919050565b600060208201905081810360008301526106ff816106c3565b9050919050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b600061073c602083610663565b915061074782610706565b602082019050919050565b6000602082019050818103600083015261076b8161072f565b905091905056fea26469706673582212207c3185d56c15c6cf6df15f01f36ff281ec234637c00e5b24065060159465538e64736f6c63430008130033a2646970667358221220eb8cd83c0f8373d47568b08c30ccca71c32bfcceed9d12055a3b66e07f4bf90964736f6c63430008130033a2646970667358221220fc3cc68d8b7d439c9d3ea9ca84bd21560d4b29095c3009eeb5809020eca2187d64736f6c63430008130033",
  "deployedBytecode": "0x60806040523480156200001157600080fd5b50600436106200003a5760003560e01c8063170a254e146200003f57806351659f1a1462000075575b600080fd5b6200005d60048036038101906200005791906200061e565b620000ab565b6040516200006c9190620006f8565b60405180910390f35b6200009360048036038101906200008d919062000715565b6200015d565b604051620000a29190620006f8565b60405180910390f35b6000620000be8989898989898962000188565b9050600082111562000151578873ffffffffffffffffffffffffffffffffffffffff166323b872dd3383856040518463ffffffff1660e01b81526004016200010993929190620007ae565b6020604051808303816000875af115801562000129573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200014f919062000828565b505b98975050505050505050565b6000806200016f8686898787620002bb565b90506200017c81620002f9565b91505095945050505050565b6000806200019a8989338887620002bb565b9050600060405180602001620001b0906200056b565b6020820181038252601f19601f8201166040525090506000818b8b8b8b8b8b604051602001620001e6969594939291906200085a565b6040516020818303038152906040526040516020016200020892919062000940565b60405160208183030381529060405290506200022783826000620003b2565b93508973ffffffffffffffffffffffffffffffffffffffff168b73ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff167f9a4ba2c17e8c99abb007ba4c6db3e815dfd367929a65096d1c64477a8bdb0e9f8c8c8c8c604051620002a5949392919062000968565b60405180910390a4505050979650505050505050565b60008585858585604051602001620002d895949392919062000a2a565b60405160208183030381529060405280519060200120905095945050505050565b6000806200037560ff60f81b30856040518060400160405280601081526020017f67363d3d37363d34f03d5260086018f3000000000000000000000000000000008152508051906020012060405160200162000359949392919062000b13565b604051602081830303815290604052805190602001206200055e565b9050620003aa816040516020016200038e919062000c14565b604051602081830303815290604052805190602001206200055e565b915050919050565b6000806040518060400160405280601081526020017f67363d3d37363d34f03d5260086018f30000000000000000000000000000000081525090506000858251602084016000f59050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036200046d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620004649062000cac565b60405180910390fd5b6200047886620002f9565b925060008173ffffffffffffffffffffffffffffffffffffffff168587604051620004a4919062000cce565b60006040518083038185875af1925050503d8060008114620004e3576040519150601f19603f3d011682016040523d82523d6000602084013e620004e8565b606091505b5050905080801562000512575060008473ffffffffffffffffffffffffffffffffffffffff163b14155b62000554576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016200054b9062000d37565b60405180910390fd5b5050509392505050565b60008160001c9050919050565b61341a8062000d5a83390190565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620005ab826200057e565b9050919050565b620005bd816200059e565b8114620005c957600080fd5b50565b600081359050620005dd81620005b2565b92915050565b6000819050919050565b620005f881620005e3565b81146200060457600080fd5b50565b6000813590506200061881620005ed565b92915050565b600080600080600080600080610100898b03121562000642576200064162000579565b5b6000620006528b828c01620005cc565b9850506020620006658b828c01620005cc565b9750506040620006788b828c01620005cc565b96505060606200068b8b828c0162000607565b95505060806200069e8b828c0162000607565b94505060a0620006b18b828c0162000607565b93505060c0620006c48b828c0162000607565b92505060e0620006d78b828c0162000607565b9150509295985092959890939650565b620006f2816200059e565b82525050565b60006020820190506200070f6000830184620006e7565b92915050565b600080600080600060a0868803121562000734576200073362000579565b5b60006200074488828901620005cc565b95505060206200075788828901620005cc565b94505060406200076a88828901620005cc565b93505060606200077d8882890162000607565b9250506080620007908882890162000607565b9150509295509295909350565b620007a881620005e3565b82525050565b6000606082019050620007c56000830186620006e7565b620007d46020830185620006e7565b620007e360408301846200079d565b949350505050565b60008115159050919050565b6200080281620007eb565b81146200080e57600080fd5b50565b6000815190506200082281620007f7565b92915050565b60006020828403121562000841576200084062000579565b5b6000620008518482850162000811565b91505092915050565b600060c082019050620008716000830189620006e7565b620008806020830188620006e7565b6200088f6040830187620006e7565b6200089e60608301866200079d565b620008ad60808301856200079d565b620008bc60a08301846200079d565b979650505050505050565b600081519050919050565b600081905092915050565b60005b83811015620008fd578082015181840152602081019050620008e0565b60008484015250505050565b60006200091682620008c7565b620009228185620008d2565b935062000934818560208601620008dd565b80840191505092915050565b60006200094e828562000909565b91506200095c828462000909565b91508190509392505050565b60006080820190506200097f6000830187620006e7565b6200098e60208301866200079d565b6200099d60408301856200079d565b620009ac60608301846200079d565b95945050505050565b60008160601b9050919050565b6000620009cf82620009b5565b9050919050565b6000620009e382620009c2565b9050919050565b620009ff620009f9826200059e565b620009d6565b82525050565b6000819050919050565b62000a2462000a1e82620005e3565b62000a05565b82525050565b600062000a388288620009ea565b60148201915062000a4a8287620009ea565b60148201915062000a5c8286620009ea565b60148201915062000a6e828562000a0f565b60208201915062000a80828462000a0f565b6020820191508190509695505050505050565b60007fff0000000000000000000000000000000000000000000000000000000000000082169050919050565b6000819050919050565b62000ade62000ad88262000a93565b62000abf565b82525050565b6000819050919050565b6000819050919050565b62000b0d62000b078262000ae4565b62000aee565b82525050565b600062000b21828762000ac9565b60018201915062000b338286620009ea565b60148201915062000b45828562000af8565b60208201915062000b57828462000af8565b60208201915081905095945050505050565b600081905092915050565b7fd694000000000000000000000000000000000000000000000000000000000000600082015250565b600062000bac60028362000b69565b915062000bb98262000b74565b600282019050919050565b7f0100000000000000000000000000000000000000000000000000000000000000600082015250565b600062000bfc60018362000b69565b915062000c098262000bc4565b600182019050919050565b600062000c218262000b9d565b915062000c2f8284620009ea565b60148201915062000c408262000bed565b915081905092915050565b600082825260208201905092915050565b7f4445504c4f594d454e545f4641494c4544000000000000000000000000000000600082015250565b600062000c9460118362000c4b565b915062000ca18262000c5c565b602082019050919050565b6000602082019050818103600083015262000cc78162000c85565b9050919050565b600062000cdc828462000909565b915081905092915050565b7f494e495449414c495a4154494f4e5f4641494c45440000000000000000000000600082015250565b600062000d1f60158362000c4b565b915062000d2c8262000ce7565b602082019050919050565b6000602082019050818103600083015262000d528162000d10565b905091905056fe60c06040523480156200001157600080fd5b506040516200341a3803806200341a833981810160405281019062000037919062000463565b8481878587868585848685836200005481620002a560201b60201c565b50600084036200009b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620000929062000560565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff16036200010d576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016200010490620005f8565b60405180910390fd5b84600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506200015e6200033860201b60201c565b6200016f826200037a60201b60201c565b82608081815250508073ffffffffffffffffffffffffffffffffffffffff1660a08173ffffffffffffffffffffffffffffffffffffffff1681525050505050505060008114620001c157806000819055505b50505050505085600960006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16635c19a95c866040518263ffffffff1660e01b81526004016200026591906200062b565b600060405180830381600087803b1580156200028057600080fd5b505af115801562000295573d6000803e3d6000fd5b5050505050505050505062000715565b60008103620002eb576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620002e29062000698565b60405180910390fd5b60006001549050816001819055507f53356ce8408d6a56b0e61bcd41861e12eb5772987856f889e38e4aba4ffa104c81836040516200032c929190620006cb565b60405180910390a15050565b426000819055507fd1dbb2ce8081405078443ef34dae718285114121a39370b14ef01b9d2b0a208342604051620003709190620006f8565b60405180910390a1565b80600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620003f082620003c3565b9050919050565b6200040281620003e3565b81146200040e57600080fd5b50565b6000815190506200042281620003f7565b92915050565b6000819050919050565b6200043d8162000428565b81146200044957600080fd5b50565b6000815190506200045d8162000432565b92915050565b60008060008060008060c08789031215620004835762000482620003be565b5b60006200049389828a0162000411565b9650506020620004a689828a0162000411565b9550506040620004b989828a0162000411565b9450506060620004cc89828a016200044c565b9350506080620004df89828a016200044c565b92505060a0620004f289828a016200044c565b9150509295509295509295565b600082825260208201905092915050565b7f546f6b656e54696d656c6f636b3a206475726174696f6e206973203000000000600082015250565b600062000548601c83620004ff565b9150620005558262000510565b602082019050919050565b600060208201905081810360008301526200057b8162000539565b9050919050565b7f546f6b656e54696d656c6f636b3a2042656e6566696369617279206d7573742060008201527f6e6f742062652030206164647265737300000000000000000000000000000000602082015250565b6000620005e0603083620004ff565b9150620005ed8262000582565b604082019050919050565b600060208201905081810360008301526200061381620005d1565b9050919050565b6200062581620003e3565b82525050565b60006020820190506200064260008301846200061a565b92915050565b7f54696d65643a207a65726f206475726174696f6e000000000000000000000000600082015250565b600062000680601483620004ff565b91506200068d8262000648565b602082019050919050565b60006020820190508181036000830152620006b38162000671565b9050919050565b620006c58162000428565b82525050565b6000604082019050620006e26000830185620006ba565b620006f16020830184620006ba565b9392505050565b60006020820190506200070f6000830184620006ba565b92915050565b60805160a051612cca6200075060003960008181610b3b01528181610bae0152610c8b015260008181610d640152610eae0152612cca6000f3fe60806040523480156200001157600080fd5b5060043610620001d15760003560e01c8063626be5671162000111578063ae951b2e11620000a5578063c5fa55a5116200007b578063c5fa55a514620004c6578063cf4f363014620004e6578063da8be864146200051c578063fc0c546a146200055257620001d1565b8063ae951b2e1462000462578063b38c43e31462000484578063b888c47914620004a457620001d1565b806380d04de811620000e757806380d04de814620003c65780638341ee7214620003e85780639e88d77e146200040a578063acc4bd08146200044057620001d1565b8063626be567146200036057806367fc6dea146200038257806378e9792514620003a457620001d1565b806318369a2a116200018957806338af3eed116200015f57806338af3eed14620002ee578063427db380146200031057806344f61ab714620003325780634929e162146200035457620001d1565b806318369a2a146200029e5780632526d96014620002c057806328b5030b14620002cc57620001d1565b8062d89b3314620001d6578063026e402b14620001f85780630357371d14620002185780630f45cc8114620002385780630fb5a6b4146200025a57806310c48245146200027c575b600080fd5b620001e062000574565b604051620001ef9190620018de565b60405180910390f35b620002166004803603810190620002109190620019a0565b62000581565b005b620002366004803603810190620002309190620019a0565b6200092a565b005b6200024262000b0d565b60405162000251919062001a52565b60405180910390f35b6200026462000b33565b60405162000273919062001a80565b60405180910390f35b6200028662000b39565b60405162000295919062001aae565b60405180910390f35b620002a862000b5d565b604051620002b7919062001a80565b60405180910390f35b620002ca62000b63565b005b620002d662000ccc565b604051620002e5919062001a80565b60405180910390f35b620002f862000d14565b60405162000307919062001aae565b60405180910390f35b6200031a62000d3a565b60405162000329919062001aae565b60405180910390f35b6200033c62000d60565b6040516200034b9190620018de565b60405180910390f35b6200035e62000d94565b005b6200036a62000e32565b60405162000379919062001a80565b60405180910390f35b6200038c62000e52565b6040516200039b919062001a80565b60405180910390f35b620003ae62000ea0565b604051620003bd919062001a80565b60405180910390f35b620003d062000ea6565b604051620003df919062001a80565b60405180910390f35b620003f262000eac565b60405162000401919062001a80565b60405180910390f35b62000428600480360381019062000422919062001acb565b62000ed0565b60405162000437919062001a80565b60405180910390f35b6200044a62000ee8565b60405162000459919062001a80565b60405180910390f35b6200046c62000f08565b6040516200047b9190620018de565b60405180910390f35b620004a260048036038101906200049c919062001acb565b62000f1b565b005b620004ae6200106b565b604051620004bd919062001a80565b60405180910390f35b620004e46004803603810190620004de919062001acb565b6200109e565b005b620005046004803603810190620004fe919062001acb565b620011b8565b60405162000513919062001aae565b60405180910390f35b6200053a600480360381019062000534919062001acb565b620011eb565b60405162000549919062001a80565b60405180910390f35b6200055c62001530565b6040516200056b919062001b22565b60405180910390f35b6000806000541415905090565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161462000614576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016200060b9062001bc6565b60405180910390fd5b6200061e62001556565b81111562000663576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016200065a9062001c5e565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff16600760008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161462000712576200070282620011eb565b816200070f919062001caf565b90505b6000600960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600083826040516200074b90620018b3565b6200075892919062001cea565b604051809103906000f08015801562000775573d6000803e3d6000fd5b50905080600760008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555082600860008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555082600a546200084a919062001caf565b600a819055508173ffffffffffffffffffffffffffffffffffffffff1663a9059cbb82856040518363ffffffff1660e01b81526004016200088d92919062001d17565b6020604051808303816000875af1158015620008ad573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620008d3919062001d75565b508373ffffffffffffffffffffffffffffffffffffffff167fb0d234274aef7a61aa5a2eb44c23881ebf46a068cccbd413c978bcbd555fe17f846040516200091c919062001a80565b60405180910390a250505050565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614620009bd576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620009b49062001bc6565b60405180910390fd5b600654620009ca62000e32565b111562000a06576000600654620009e062000e32565b620009ec919062001da7565b905080600554620009fe919062001caf565b600581905550505b6000810362000a4c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040162000a439062001e32565b60405180910390fd5b62000a5662000d60565b62000a98576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040162000a8f9062001ea4565b60405180910390fd5b600062000aa462000ccc565b90508082111562000aec576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040162000ae39062001f3c565b60405180910390fd5b62000af88383620015fe565b5062000b0362000e32565b6006819055505050565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60015481565b7f000000000000000000000000000000000000000000000000000000000000000081565b60055481565b60065462000b7062000e32565b111562000bac57600060065462000b8662000e32565b62000b92919062001da7565b90508060055462000ba4919062001caf565b600581905550505b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161462000c3d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040162000c349062001fd4565b60405180910390fd5b62000c4762000d60565b1562000c855762000c84600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1662000c7e62000ccc565b620015fe565b5b62000cba7f000000000000000000000000000000000000000000000000000000000000000062000cb462000e32565b620015fe565b62000cc462000e32565b600681905550565b60008062000cd962000e52565b9050600062000cee6005548360015462001731565b9050600062000cfc6200106b565b8262000d09919062001da7565b905080935050505090565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60007f000000000000000000000000000000000000000000000000000000000000000062000d8d62000e52565b1015905090565b62000d9f3362001757565b600960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16635c19a95c336040518263ffffffff1660e01b815260040162000dfc919062001aae565b600060405180830381600087803b15801562000e1757600080fd5b505af115801562000e2c573d6000803e3d6000fd5b50505050565b6000600a5462000e4162001556565b62000e4d919062001caf565b905090565b600062000e5e62000574565b62000e6d576000905062000e9d565b60006001549050600080544262000e85919062001da7565b905081811162000e96578062000e98565b815b925050505b90565b60005481565b600a5481565b7f000000000000000000000000000000000000000000000000000000000000000081565b60086020528060005260406000206000915090505481565b600062000ef462000e52565b60015462000f03919062001da7565b905090565b60008062000f1562000ee8565b14905090565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161462000fae576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040162000fa59062001bc6565b60405180910390fd5b60065462000fbb62000e32565b111562000ff757600060065462000fd162000e32565b62000fdd919062001da7565b90508060055462000fef919062001caf565b600581905550505b6200100162000d60565b62001043576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016200103a9062001ea4565b60405180910390fd5b62001058816200105262000ccc565b620015fe565b6200106262000e32565b60068190555050565b6000806005541462001096576200108162000e32565b60055462001090919062001da7565b62001099565b60005b905090565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161462001131576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620011289062001bc6565b60405180910390fd5b80600460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508073ffffffffffffffffffffffffffffffffffffffff167f636f16dafcc1e5b7ae44b2a7fd661757f160672716bb47a02c7d3f5108be49a060405160405180910390a250565b60076020528060005260406000206000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161462001280576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620012779062001bc6565b60405180910390fd5b6000600760008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff160362001356576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016200134d906200206c565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff16633ccfd60b6040518163ffffffff1660e01b8152600401600060405180830381600087803b1580156200139f57600080fd5b505af1158015620013b4573d6000803e3d6000fd5b505050506000600860008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905080600a546200140c919062001da7565b600a819055506000600760008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000600860008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508373ffffffffffffffffffffffffffffffffffffffff167f17659a1d1f57d2e58b7063ee8b518b50d00bf3e5c0d8224b68ba865e4725a0b4826040516200151e919062001a80565b60405180910390a28092505050919050565b600960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000600960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401620015b5919062001aae565b602060405180830381865afa158015620015d3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620015f99190620020a5565b905090565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb83836040518363ffffffff1660e01b81526004016200165d92919062001d17565b6020604051808303816000875af11580156200167d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620016a3919062001d75565b508173ffffffffffffffffffffffffffffffffffffffff16600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167fcb54aad3bd772fcfe1bc124e01bd1a91a91c9d80126d8b3014c4d9e687d5ca488360405162001725919062001a80565b60405180910390a35050565b6000818385620017429190620020d7565b6200174e919062002151565b90509392505050565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614620017ea576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620017e190620021ff565b60405180910390fd5b80600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508073ffffffffffffffffffffffffffffffffffffffff167fe356863d8c81d46ff30d41a6332e1d04d2fb6c0f043fa6554e3d1e1deae95a8a60405160405180910390a26000600460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b610a73806200222283390190565b60008115159050919050565b620018d881620018c1565b82525050565b6000602082019050620018f56000830184620018cd565b92915050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006200192d8262001900565b9050919050565b6200193f8162001920565b81146200194b57600080fd5b50565b6000813590506200195f8162001934565b92915050565b6000819050919050565b6200197a8162001965565b81146200198657600080fd5b50565b6000813590506200199a816200196f565b92915050565b60008060408385031215620019ba57620019b9620018fb565b5b6000620019ca858286016200194e565b9250506020620019dd8582860162001989565b9150509250929050565b6000819050919050565b600062001a1262001a0c62001a068462001900565b620019e7565b62001900565b9050919050565b600062001a2682620019f1565b9050919050565b600062001a3a8262001a19565b9050919050565b62001a4c8162001a2d565b82525050565b600060208201905062001a69600083018462001a41565b92915050565b62001a7a8162001965565b82525050565b600060208201905062001a97600083018462001a6f565b92915050565b62001aa88162001920565b82525050565b600060208201905062001ac5600083018462001a9d565b92915050565b60006020828403121562001ae45762001ae3620018fb565b5b600062001af4848285016200194e565b91505092915050565b600062001b0a8262001a19565b9050919050565b62001b1c8162001afd565b82525050565b600060208201905062001b39600083018462001b11565b92915050565b600082825260208201905092915050565b7f546f6b656e54696d656c6f636b3a2043616c6c6572206973206e6f742061206260008201527f656e656669636961727900000000000000000000000000000000000000000000602082015250565b600062001bae602a8362001b3f565b915062001bbb8262001b50565b604082019050919050565b6000602082019050818103600083015262001be18162001b9f565b9050919050565b7f54696d656c6f636b656444656c656761746f723a204e6f7420656e6f7567682060008201527f62616c616e636500000000000000000000000000000000000000000000000000602082015250565b600062001c4660278362001b3f565b915062001c538262001be8565b604082019050919050565b6000602082019050818103600083015262001c798162001c37565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600062001cbc8262001965565b915062001cc98362001965565b925082820190508082111562001ce45762001ce362001c80565b5b92915050565b600060408201905062001d01600083018562001a9d565b62001d10602083018462001a9d565b9392505050565b600060408201905062001d2e600083018562001a9d565b62001d3d602083018462001a6f565b9392505050565b62001d4f81620018c1565b811462001d5b57600080fd5b50565b60008151905062001d6f8162001d44565b92915050565b60006020828403121562001d8e5762001d8d620018fb565b5b600062001d9e8482850162001d5e565b91505092915050565b600062001db48262001965565b915062001dc18362001965565b925082820390508181111562001ddc5762001ddb62001c80565b5b92915050565b7f546f6b656e54696d656c6f636b3a206e6f20616d6f756e742064657369726564600082015250565b600062001e1a60208362001b3f565b915062001e278262001de2565b602082019050919050565b6000602082019050818103600083015262001e4d8162001e0b565b9050919050565b7f546f6b656e54696d656c6f636b3a20436c696666206e6f742070617373656400600082015250565b600062001e8c601f8362001b3f565b915062001e998262001e54565b602082019050919050565b6000602082019050818103600083015262001ebf8162001e7d565b9050919050565b7f546f6b656e54696d656c6f636b3a206e6f7420656e6f7567682072656c65617360008201527f656420746f6b656e730000000000000000000000000000000000000000000000602082015250565b600062001f2460298362001b3f565b915062001f318262001ec6565b604082019050919050565b6000602082019050818103600083015262001f578162001f15565b9050919050565b7f546f6b656e54696d656c6f636b3a204f6e6c7920636c61776261636b41646d6960008201527f6e00000000000000000000000000000000000000000000000000000000000000602082015250565b600062001fbc60218362001b3f565b915062001fc98262001f5e565b604082019050919050565b6000602082019050818103600083015262001fef8162001fad565b9050919050565b7f54696d656c6f636b656444656c656761746f723a2044656c656761746520636f60008201527f6e7472616374206e6f6e6578697374656e740000000000000000000000000000602082015250565b60006200205460328362001b3f565b9150620020618262001ff6565b604082019050919050565b60006020820190508181036000830152620020878162002045565b9050919050565b6000815190506200209f816200196f565b92915050565b600060208284031215620020be57620020bd620018fb565b5b6000620020ce848285016200208e565b91505092915050565b6000620020e48262001965565b9150620020f18362001965565b9250828202620021018162001965565b915082820484148315176200211b576200211a62001c80565b5b5092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b60006200215e8262001965565b91506200216b8362001965565b9250826200217e576200217d62002122565b5b828204905092915050565b7f546f6b656e54696d656c6f636b3a2043616c6c6572206973206e6f742070656e60008201527f64696e672062656e656669636961727900000000000000000000000000000000602082015250565b6000620021e760308362001b3f565b9150620021f48262002189565b604082019050919050565b600060208201905081810360008301526200221a81620021d8565b905091905056fe608060405234801561001057600080fd5b50604051610a73380380610a7383398181016040528101906100329190610252565b61004e61004361012360201b60201c565b61012b60201b60201c565b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16635c19a95c836040518263ffffffff1660e01b81526004016100ea91906102a1565b600060405180830381600087803b15801561010457600080fd5b505af1158015610118573d6000803e3d6000fd5b5050505050506102bc565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061021f826101f4565b9050919050565b61022f81610214565b811461023a57600080fd5b50565b60008151905061024c81610226565b92915050565b60008060408385031215610269576102686101ef565b5b60006102778582860161023d565b92505060206102888582860161023d565b9150509250929050565b61029b81610214565b82525050565b60006020820190506102b66000830184610292565b92915050565b6107a8806102cb6000396000f3fe608060405234801561001057600080fd5b50600436106100575760003560e01c80633ccfd60b1461005c578063715018a6146100665780638da5cb5b14610070578063f2fde38b1461008e578063fc0c546a146100aa575b600080fd5b6100646100c8565b005b61006e6101ff565b005b610078610213565b6040516100859190610470565b60405180910390f35b6100a860048036038101906100a391906104bc565b61023c565b005b6100b26102bf565b6040516100bf9190610548565b60405180910390f35b6100d06102e5565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060008173ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016101329190610470565b602060405180830381865afa15801561014f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101739190610599565b90508173ffffffffffffffffffffffffffffffffffffffff1663a9059cbb610199610213565b836040518363ffffffff1660e01b81526004016101b79291906105d5565b6020604051808303816000875af11580156101d6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101fa9190610636565b505050565b6102076102e5565b6102116000610363565b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6102446102e5565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036102b3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102aa906106e6565b60405180910390fd5b6102bc81610363565b50565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6102ed610427565b73ffffffffffffffffffffffffffffffffffffffff1661030b610213565b73ffffffffffffffffffffffffffffffffffffffff1614610361576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161035890610752565b60405180910390fd5b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600033905090565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061045a8261042f565b9050919050565b61046a8161044f565b82525050565b60006020820190506104856000830184610461565b92915050565b600080fd5b6104998161044f565b81146104a457600080fd5b50565b6000813590506104b681610490565b92915050565b6000602082840312156104d2576104d161048b565b5b60006104e0848285016104a7565b91505092915050565b6000819050919050565b600061050e6105096105048461042f565b6104e9565b61042f565b9050919050565b6000610520826104f3565b9050919050565b600061053282610515565b9050919050565b61054281610527565b82525050565b600060208201905061055d6000830184610539565b92915050565b6000819050919050565b61057681610563565b811461058157600080fd5b50565b6000815190506105938161056d565b92915050565b6000602082840312156105af576105ae61048b565b5b60006105bd84828501610584565b91505092915050565b6105cf81610563565b82525050565b60006040820190506105ea6000830185610461565b6105f760208301846105c6565b9392505050565b60008115159050919050565b610613816105fe565b811461061e57600080fd5b50565b6000815190506106308161060a565b92915050565b60006020828403121561064c5761064b61048b565b5b600061065a84828501610621565b91505092915050565b600082825260208201905092915050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b60006106d0602683610663565b91506106db82610674565b604082019050919050565b600060208201905081810360008301526106ff816106c3565b9050919050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b600061073c602083610663565b915061074782610706565b602082019050919050565b6000602082019050818103600083015261076b8161072f565b905091905056fea26469706673582212207c3185d56c15c6cf6df15f01f36ff281ec234637c00e5b24065060159465538e64736f6c63430008130033a2646970667358221220eb8cd83c0f8373d47568b08c30ccca71c32bfcceed9d12055a3b66e07f4bf90964736f6c63430008130033a2646970667358221220fc3cc68d8b7d439c9d3ea9ca84bd21560d4b29095c3009eeb5809020eca2187d64736f6c63430008130033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "computeTimelockAddress(address,address,address,uint256,uint256)": {
        "params": {
          "_amount": "The amount to unlock",
          "_beneficiary": "The address that will claim unlocks",
          "_deployer": "The address that will deploy the contract",
          "_startTime": "The start time",
          "_token": "The token to unlock"
        }
      },
      "deployTimelock(address,address,address,uint256,uint256,uint256,uint256,uint256)": {
        "details": "Salt generated from token, beneficiary, amount, and deployer.Funding is optional. If funding is provided, the timelock will be funded with the funding amount. ",
        "params": {
          "_admin": "Clawback admin",
          "_amount": "The amount to unlock",
          "_beneficiary": "Unlocking address",
          "_cliffDuration": "Duration of cliff in seconds",
          "_duration": "Duration of the unlock schedule in seconds",
          "_funding": "The initial funding amount",
          "_startTime": "Unlock start time in seconds",
          "_token": "Token to unlock"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "computeTimelockAddress(address,address,address,uint256,uint256)": {
        "notice": "Computes the address of a timelock contract. "
      },
      "deployTimelock(address,address,address,uint256,uint256,uint256,uint256,uint256)": {
        "notice": "Deploys a LineatTokenTimelock with create3. "
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}